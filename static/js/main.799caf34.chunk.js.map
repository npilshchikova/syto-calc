{"version":3,"sources":["plate/PlateCell.js","plate/Plate.js","upload/Upload.js","App.js","serviceWorker.js","index.js"],"names":["PlateCell","props","state","color","updateColor","bind","this","setState","className","onClick","sampleName","cellId","fluorescence","Component","letters","Array","from","length","_","i","String","fromCharCode","charCodeAt","indices","keys","cells","reduce","acc","v","concat","map","w","Plate","id","key","name","renderLetterIds","renderNumberIds","renderCells","Upload","type","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wWA8BeA,G,kBAzBb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,QAGT,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBANF,E,2EAUI,SAArBC,KAAKJ,MAAMC,MACTG,KAAKC,SAAS,CAAEJ,MAAO,QACvBG,KAAKC,SAAS,CAAEJ,MAAO,W,+BAIzB,OACE,yBAAKK,UAAU,kBAAkBC,QAASH,KAAKF,aAC7C,uBAAGI,UAAU,cAAcF,KAAKL,MAAMS,WAAtC,MAAqDJ,KAAKL,MAAMU,OAAhE,MAA2EL,KAAKJ,MAAMC,OACtF,uBAAGK,UAAU,aAAaF,KAAKL,MAAMW,mB,GArBrBC,cCGlBC,EAAUC,MAAMC,KACpB,CAAEC,OAAQ,KAAM,SAACC,EAAGC,GAAJ,OAAUC,OAAOC,aAAa,IAAIC,WAAW,GAAKH,MAE9DI,EAAUR,MAAMC,KAAKD,MAAM,GAAGS,QAC9BC,EAAQF,EAAQG,QACpB,SAACC,EAAKC,GAAN,OAAYD,EAAIE,OAAOf,EAAQgB,KAAK,SAAAC,GAAC,OAAIA,GAAKH,EAAI,SAAO,IAuC5CI,E,YAjCb,WAAY/B,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,GAFI,E,2EAMjB,OAAOuB,EAAMK,KAAI,SAAAG,GAAE,OACjB,kBAAC,EAAD,CAAWC,IAAKD,EAAItB,OAAQsB,S,wCAK9B,OAAOnB,EAAQgB,KAAK,SAAAG,GAAE,OAAM,yBAAKC,IAAKD,GAAKA,Q,wCAI3C,OAAOV,EAAQO,KAAK,SAAAG,GAAE,OAAM,yBAAKC,IAAKD,GAAKA,EAAK,Q,+BAIhD,OACE,yBAAKzB,UAAU,SACb,wBAAIA,UAAU,gBAAd,UAAqCF,KAAKL,MAAMkC,MAChD,yBAAK3B,UAAU,UAAUF,KAAK8B,mBAC9B,yBAAK5B,UAAU,YAAYF,KAAK+B,mBAChC,yBAAK7B,UAAU,cACZF,KAAKgC,oB,GA5BIzB,aCFL0B,G,uLARX,OACE,6BACE,2BAAOC,KAAK,OAAOL,KAAK,c,GAJXtB,cCoBN4B,E,iLAdX,OACE,yBAAKjC,UAAU,OACb,yBAAKA,UAAU,UACb,uBAAGA,UAAU,MAAb,eACA,kBAAC,EAAD,OAEF,yBAAKA,UAAU,YACb,kBAAC,EAAD,CAAO2B,KAAK,e,GATJtB,aCKE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.799caf34.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './PlateCell.css';\n\nclass PlateCell extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { \n      color: 'smpl',\n    };\n\n    this.updateColor = this.updateColor.bind(this);\n  }\n\n  updateColor() {\n    this.state.color === 'smpl' ? \n      this.setState({ color: 'std' }) :\n      this.setState({ color: 'smpl' })\n  }\n\n  render() {\n    return (\n      <div className=\"plate-cell card\" onClick={this.updateColor}>\n        <p className=\"card-title\">{this.props.sampleName} - {this.props.cellId} - {this.state.color}</p>\n        <p className=\"card-text\">{this.props.fluorescence}</p>\n      </div>\n    );\n  }\n};\n\nexport default PlateCell;\n","import React, { Component } from 'react';\nimport './Plate.css';\nimport PlateCell from './PlateCell';\n\n\n// constants for standard 96-well plate\nconst letters = Array.from(\n  { length: 12 }, (_, i) => String.fromCharCode('A'.charCodeAt(0) + i)\n);\nconst indices = Array.from(Array(8).keys());\nconst cells = indices.reduce(\n  (acc, v) => acc.concat(letters.map( w => w + (v + 1) )), []\n);\n\n\nclass Plate extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  renderCells() {\n    return cells.map(id => (\n      <PlateCell key={id} cellId={id}/>\n    ));\n  }\n\n  renderLetterIds() {\n    return letters.map( id => ( <div key={id}>{id}</div> ) );\n  }\n\n  renderNumberIds() {\n    return indices.map( id => ( <div key={id}>{id + 1}</div> ) );\n  }\n\n  render() {\n    return (\n      <div className=\"plate\">\n        <h5 className=\"plate-header\">Plate: {this.props.name}</h5>\n        <div className=\"up-ids\">{this.renderLetterIds()}</div>\n        <div className=\"left-ids\">{this.renderNumberIds()}</div>\n        <div className=\"plate-body\">\n          {this.renderCells()}\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default Plate;\n","import React, { Component } from 'react';\nimport './Upload.css';\n\nclass Upload extends Component {\n  render() {\n    return (\n      <div>\n        <input type=\"file\" name=\"file\"/>\n      </div>\n    );\n  }\n};\n\nexport default Upload;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Plate from './plate/Plate';\nimport Upload from './upload/Upload';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <nav className=\"navbar\">\n          <p className=\"h5\">SYTO13 calc</p>\n          <Upload/>\n        </nav>\n        <div className=\"App-body\">\n          <Plate name='test'/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}